# Zephyr SDK Continuous Integration Workflow

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  BUNDLE_PREFIX: zephyr-sdk
  # TODO: Parameterise more extensively

jobs:
  # Setup
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      hosts: ${{ steps.generate-matrix.outputs.hosts }}
      targets: ${{ steps.generate-matrix.outputs.targets }}

    steps:
    - name: Check out source code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Generate version file
      run: |
        VERSION=$(git describe --tags --match 'v*')
        echo "${VERSION:1}" > version

    - name: Upload version file
      uses: actions/upload-artifact@v2
      with:
        name: version
        path: version

    - name: Generate matrix
      id: generate-matrix
      run: |
        # Set build configurations
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          # Set configurations based on the pull request labels
          ${{ contains(github.event.pull_request.labels.*.name, 'ci-linux-x86_64') }}   && build_host_linux_x86_64="y"
          ${{ contains(github.event.pull_request.labels.*.name, 'ci-linux-aarch64') }}  && build_host_linux_aarch64="y"
          ${{ contains(github.event.pull_request.labels.*.name, 'ci-macos-x86_64') }}   && build_host_macos_x86_64="y"
          ${{ contains(github.event.pull_request.labels.*.name, 'ci-macos-aarch64') }}  && build_host_macos_aarch64="y"
          ${{ contains(github.event.pull_request.labels.*.name, 'ci-windows-x86_64') }} && build_host_windows_x86_64="y"
        else
          # Build all for push to main and releases
          build_host_linux_x86_64="y"
          # build_host_linux_aarch64="y"
          # build_host_macos_x86_64="y"
          # build_host_macos_aarch64="y"
          # build_host_windows_x86_64="y"
        fi

        # Build 'linux_x86_64' by default if no host is selected
        list_build_host=(${!build_host_@})
        [ "${#list_build_host[@]}" == "0" ] && build_host_linux_x86_64="y"

        # Generate host list
        MATRIX_HOSTS='['

        if [ "${build_host_linux_x86_64}" == "y" ]; then
          MATRIX_HOSTS+='{
              "name": "linux-x86_64",
              "build-runner": "zephyr_runner",
              "build-container": "stephanosio/zephyr-docker-sdk-build-test:latest",
              "test-runner": "ubuntu-latest",
              "test-container": "",
              "archive": "tar.gz"
            },'
        fi

        if [ "${build_host_linux_aarch64}" == "y" ]; then
          MATRIX_HOSTS+='{
              "name": "linux-aarch64",
              "build-runner": "zephyr_runner",
              "build-container": "stephanosio/zephyr-docker-sdk-build-test:latest",
              "test-runner": "",
              "test-container": "",
              "archive": "tar.gz"
            },'
        fi

        if [ "${build_host_macos_x86_64}" == "y" ]; then
          MATRIX_HOSTS+='{
              "name": "macos-x86_64",
              "build-runner": "zephyr_runner-macos-x86_64",
              "build-container": "",
              "test-runner": "macos-latest",
              "test-container": "",
              "archive": "tar.gz"
            },'
        fi

        if [ "${build_host_macos_aarch64}" == "y" ]; then
          MATRIX_HOSTS+='{
              "name": "macos-aarch64",
              "build-runner": "zephyr_runner-macos-x86_64",
              "build-container": "",
              "test-runner": "",
              "test-container": "",
              "archive": "tar.gz"
            },'
        fi

        if [ "${build_host_windows_x86_64}" == "y" ]; then
          MATRIX_HOSTS+='{
              "name": "windows-x86_64",
              "build-runner": "zephyr_runner",
              "build-container": "stephanosio/zephyr-docker-sdk-build-test:latest",
              "test-runner": "windows-latest",
              "test-container": "",
              "archive": "zip"
            },'
        fi

        MATRIX_HOSTS+=']'

        # Generate target list
        MATRIX_TARGETS='['
        MATRIX_TARGETS+='"aarch64-zephyr-elf",'
        # MATRIX_TARGETS+='"arc64-zephyr-elf",'
        # MATRIX_TARGETS+='"arc-zephyr-elf",'
        # MATRIX_TARGETS+='"arm-zephyr-eabi",'
        # MATRIX_TARGETS+='"mips-zephyr-elf",'
        # MATRIX_TARGETS+='"nios2-zephyr-elf",'
        # MATRIX_TARGETS+='"riscv64-zephyr-elf",'
        # MATRIX_TARGETS+='"sparc-zephyr-elf",'
        # MATRIX_TARGETS+='"x86_64-zephyr-elf",'
        # MATRIX_TARGETS+='"xtensa-intel_apl_adsp_zephyr-elf",'
        # MATRIX_TARGETS+='"xtensa-intel_bdw_adsp_zephyr-elf",'
        # MATRIX_TARGETS+='"xtensa-intel_byt_adsp_zephyr-elf",'
        # MATRIX_TARGETS+='"xtensa-intel_s1000_zephyr-elf",'
        # MATRIX_TARGETS+='"xtensa-nxp_imx_adsp_zephyr-elf",'
        # MATRIX_TARGETS+='"xtensa-nxp_imx8m_adsp_zephyr-elf",'
        # MATRIX_TARGETS+='"xtensa-sample_controller_zephyr-elf",'
        MATRIX_TARGETS+=']'

        # Escape control characters because GitHub Actions
        MATRIX_HOSTS="${MATRIX_HOSTS//'%'/''}"
        MATRIX_HOSTS="${MATRIX_HOSTS//$'\n'/''}"
        MATRIX_HOSTS="${MATRIX_HOSTS//$'\r'/''}"
        MATRIX_TARGETS="${MATRIX_TARGETS//'%'/''}"
        MATRIX_TARGETS="${MATRIX_TARGETS//$'\n'/''}"
        MATRIX_TARGETS="${MATRIX_TARGETS//$'\r'/''}"

        # Remove trailing comma
        MATRIX_HOSTS=$(echo "${MATRIX_HOSTS}" | sed -zr 's/,([^,]*$)/\1/')
        MATRIX_TARGETS=$(echo "${MATRIX_TARGETS}" | sed -zr 's/,([^,]*$)/\1/')

        # Output matrix variables
        echo "::set-output name=hosts::${MATRIX_HOSTS}"
        echo "::set-output name=targets::${MATRIX_TARGETS}"

  # Build toolchain
  build-toolchain:
    name: Toolchain ${{ matrix.target }} (${{ matrix.host.name }})
    needs: setup
    runs-on: ${{ matrix.host.build-runner }}
    container: ${{ matrix.host.build-container }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        host: ${{ fromJSON(needs.setup.outputs.hosts) }}
        target: ${{ fromJSON(needs.setup.outputs.targets) }}

    steps:
    # - name: echo-default-env-variables
    #   run: |
    #     whoami
    #     echo "Shell: ${SHELL}"
    #     echo "Home: ${HOME}"
    #     echo "RUNNER_NAME: ${RUNNER_NAME}"
    #     echo "RUNNER_TEMP: ${RUNNER_TEMP}"
    #     echo "GITHUB_WORKFLOW: ${GITHUB_WORKFLOW}"
    #     echo "GITHUB_ACTIONS: ${GITHUB_ACTIONS}"
    #     echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
    #     echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
    #     echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
    #     echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
    #     echo "GITHUB_SHA: ${GITHUB_SHA}"
    #     echo "GITHUB_REF: ${GITHUB_REF}"

    - name: Set up build environment (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        # Create workspace directory
        WORKSPACE="${RUNNER_TEMP}/workspace"
        sudo mkdir -p ${WORKSPACE}

        # Clean up working directories
        sudo rm -rf ${GITHUB_WORKSPACE}/*
        sudo rm -rf ${WORKSPACE}/*

        # Allow non-root access to the working directories
        sudo chmod -R 777 ${GITHUB_WORKSPACE}
        sudo chmod -R 777 ${RUNNER_TEMP}

        # Install common dependencies
        sudo apt update
        sudo apt-get install -y autoconf automake bison flex gettext \
                                help2man libboost-dev libboost-regex-dev \
                                libncurses5-dev libtool-bin libtool-doc \
                                pkg-config texinfo zip

        # Install dependencies for cross compilation
        if [ "${{ matrix.host.name }}" == "linux-aarch64" ]; then
          # Install aarch64-linux-gnu cross toolchain
          sudo apt-get install -y binutils-aarch64-linux-gnu \
                                  gcc-aarch64-linux-gnu \
                                  g++-aarch64-linux-gnu
        elif [ "${{ matrix.host.name }}" == "windows-x86_64" ]; then
          # Install MinGW-w64 cross toolchain
          sudo apt-get install -y binutils-mingw-w64 gcc-mingw-w64 \
                                  g++-mingw-w64

          # Build and install libboost-regex for MinGW-w64 host
          ## Check out Boost library source code
          mkdir -p ${WORKSPACE}/boost
          pushd ${WORKSPACE}/boost

          git clone \
            --branch boost-1.73.0 --depth 1 \
            https://github.com/boostorg/boost.git \
            src

          cd src
          git submodule update --init --depth 1

          ## Bootstrap boost library build system with MinGW-w64 compiler
          ./bootstrap.sh --with-toolset=gcc --with-libraries=regex --without-icu

          sed -i \
            's/using gcc ;/using gcc : mingw : x86_64-w64-mingw32-g++ ;/g' \
            project-config.jam

          ## Build and install boost-regex library
          sudo ./b2 install \
            toolset=gcc-mingw link=static threading=multi variant=release \
            --prefix=/usr/x86_64-w64-mingw32

          ## Clean up to reduce disk usage
          popd
          sudo rm -rf ${WORKSPACE}/boost
        fi

        # Set environment variables
        echo "TAR=tar" >> $GITHUB_ENV
        echo "WORKSPACE=${WORKSPACE}" >> $GITHUB_ENV

    - name: Set up build environment (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        # Delete workspace from the previous run
        WORKSPACE="/Volumes/Workspace"
        if [ -d ${WORKSPACE} ]; then
          # Get disk device name
          OLDDISK=$(diskutil info -plist "${WORKSPACE}" |
                    plutil -extract ParentWholeDisk xml1 - -o - |
                    sed -n "s/.*<string>\(.*\)<\/string>.*/\1/p")

          # Force unmount and eject to deallocate disk blocks
          if [ ! -z "${OLDDISK}" ]; then
            diskutil unmountDisk force ${OLDDISK}
            diskutil eject ${OLDDISK}
          fi
        fi

        # Clean up working directories
        rm -rf ${GITHUB_WORKSPACE}/*
        rm -f ${RUNNER_TEMP}/Workspace.sparseimage

        # Create case-sensitive workspace volume for macOS
        hdiutil create ${RUNNER_TEMP}/Workspace.sparseimage \
                       -volname Workspace -type SPARSE -size 50g -fs HFSX
        hdiutil mount ${RUNNER_TEMP}/Workspace.sparseimage -mountpoint ${WORKSPACE}

        # Install required dependencies if running inside a GitHub-hosted runner
        # (self-hosted runners are expected to provide all required dependencies)
        if [[ "${{ matrix.host.build-runner }}" =~ ^macos.* ]]; then
          brew install autoconf automake bash binutils boost gawk gnu-sed \
                       gnu-tar help2man ncurses pkg-config
        fi

        # Install dependencies for cross compilation
        if [ "${{ matrix.host.name }}" == "macos-aarch64" ]; then
          # Clone x86-AArch64 crosskit
          git clone \
            https://github.com/stephanosio/crosskit-aarch64-apple-darwin.git \
            ${WORKSPACE}/crosskit

          # Make crosskit available in PATH
          echo "${WORKSPACE}/crosskit/scripts" >> $GITHUB_PATH
        fi

        # Make Python 3.8 available in PATH
        echo "/usr/local/opt/python@3.8/bin" >> $GITHUB_PATH

        # Set environment variables
        echo "TAR=gtar" >> $GITHUB_ENV
        echo "WORKSPACE=${WORKSPACE}" >> $GITHUB_ENV

    - name: Check out source code
      uses: actions/checkout@v2

    - name: Build crosstool-ng
      run: |
        # Configure macOS build environment
        if [ "$RUNNER_OS" == "macOS" ]; then
          export PATH="$PATH:/usr/local/opt/binutils/bin"
          export CPPFLAGS="-I/usr/local/opt/ncurses/include -I/usr/local/opt/gettext/include"
          export LDFLAGS="-L/usr/local/opt/ncurses/lib -L/usr/local/opt/gettext/lib"
        fi

        # Check out crosstool-ng source code
        COMMIT=$(<CROSSTOOL_COMMIT)

        pushd ${WORKSPACE}
        git clone \
          https://github.com/zephyrproject-rtos/crosstool-ng.git \
          crosstool-ng-src

        cd crosstool-ng-src
        git checkout $COMMIT

        # Build and install crosstool-ng
        ./bootstrap
        ./configure --prefix=${WORKSPACE}/crosstool-ng
        make
        make install

        # Clean up build directory to reduce disk usage
        popd
        rm -rf ${WORKSPACE}/crosstool-ng-src

        # Export crosstool-ng executable path
        echo "CT_NG=${WORKSPACE}/crosstool-ng/bin/ct-ng" >> $GITHUB_ENV

    - name: Test crosstool-ng
      run: |
        ${CT_NG} version

    - name: Build toolchain
      run: |
        # Set output path
        export CT_PREFIX="${WORKSPACE}/output"

        # Create build directory
        mkdir -p ${WORKSPACE}/build
        pushd ${WORKSPACE}/build

        # Load default target configurations
        cp ${GITHUB_WORKSPACE}/configs/${{ matrix.target }}.config \
           .config

        # Set build configuration
        cat <<EOF >> .config
        CT_LOCAL_TARBALLS_DIR="${WORKSPACE}/sources"
        CT_LOCAL_PATCH_DIR="${GITHUB_WORKSPACE}/patches-arc64"
        CT_OVERLAY_LOCATION="${GITHUB_WORKSPACE}/overlays"
        EOF

        # Set logging configurations
        cat <<EOF >> .config
        CT_LOG_PROGRESS_BAR=n
        CT_LOG_EXTRA=y
        CT_LOG_LEVEL_MAX="EXTRA"
        EOF

        # Set Canadian cross compilation configurations
        if [ "${{ matrix.host.name }}" == "linux-aarch64" ]; then
          # Building for linux-aarch64 on linux-x86_64
          cat <<EOF >> .config
        CT_CANADIAN=y
        CT_HOST="aarch64-linux-gnu"
        EOF
        elif [ "${{ matrix.host.name }}" == "macos-aarch64" ]; then
          # Building for macos-aarch64 on macos-x86_64
          cat <<EOF >> .config
        CT_CANADIAN=y
        CT_HOST="aarch64-apple-darwin"
        EOF
        elif [ "${{ matrix.host.name }}" == "windows-x86_64" ]; then
          # Building for windows-x86_64 on linux-x86_64
          cat <<EOF >> .config
        CT_CANADIAN=y
        CT_HOST="x86_64-w64-mingw32"
        EOF
        fi

        # Configure Windows Python library
        if [ "${{ matrix.host.name }}" == "windows-x86_64" ]; then
          # Clone mingw-w64-libpython cross compilation kit
          git clone \
            https://github.com/stephanosio/mingw-w64-libpython.git \
            ${WORKSPACE}/mingw-w64-libpython
          # Use Python 3.6.8
          LIBPYTHON_KIT_ROOT=${WORKSPACE}/mingw-w64-libpython/python-3.6.8
          # Set Python configuration resolver for GDB
          cat <<EOF >> .config
        CT_GDB_CROSS_PYTHON_BINARY="${LIBPYTHON_KIT_ROOT}/bin/python"
        EOF
        fi

        # Allow building as root on Linux to avoid all sorts of container
        # permission issues with the GitHub Actions.
        if [ "$RUNNER_OS" == "Linux" ]; then
          cat <<EOF >> .config
        CT_EXPERIMENTAL=y
        CT_ALLOW_BUILD_AS_ROOT=y
        CT_ALLOW_BUILD_AS_ROOT_SURE=y
        EOF
        fi

        # Merge configurations
        ${CT_NG} savedefconfig DEFCONFIG=build.config
        ${CT_NG} distclean
        ${CT_NG} defconfig DEFCONFIG=build.config

        # Build toolchain
        ${CT_NG} build
        popd

        # Resolve output directory path
        if [ "${{ matrix.host.name }}" == "linux-aarch64" ]; then
          OUTPUT_BASE="${WORKSPACE}/output"
          OUTPUT_DIR="HOST-aarch64-linux-gnu"
        elif [ "${{ matrix.host.name }}" == "macos-aarch64" ]; then
          OUTPUT_BASE="${WORKSPACE}/output"
          OUTPUT_DIR="HOST-aarch64-apple-darwin"
        elif [ "${{ matrix.host.name }}" == "windows-x86_64" ]; then
          OUTPUT_BASE="${WORKSPACE}/output"
          OUTPUT_DIR="HOST-x86_64-w64-mingw32"
        else
          OUTPUT_BASE="${WORKSPACE}"
          OUTPUT_DIR="output"
        fi

        # Remove unneeded files from output directory
        pushd ${OUTPUT_BASE}/${OUTPUT_DIR}/${{ matrix.target }}
        rm -rf newlib-nano
        rm -f build.log.bz2
        popd

        # Grant write permission for owner
        chmod -R u+w ${OUTPUT_BASE}/${OUTPUT_DIR}

        # Rename Canadian cross-compiled toolchain output directory to
        # "output" for consistency
        if [ "${OUTPUT_DIR}" != "output" ]; then
          mv ${OUTPUT_BASE}/${OUTPUT_DIR} ${OUTPUT_BASE}/output
          OUTPUT_DIR="output"
        fi

        # Create archive
        if [ "${{ matrix.host.archive }}" == "tar.gz" ]; then
          ${TAR} -zcvf toolchain_${{ matrix.host.name }}_${{ matrix.target }}.tar.gz \
                 --owner=0 --group=0 -C ${OUTPUT_BASE}/${OUTPUT_DIR} ${{ matrix.target }}
        elif [ "${{ matrix.host.archive }}" == "zip" ]; then
          pushd ${OUTPUT_BASE}/${OUTPUT_DIR}
          zip -r ${GITHUB_WORKSPACE}/toolchain_${{ matrix.host.name }}_${{ matrix.target }}.zip \
                 ${{ matrix.target }}
          popd
        fi

    - name: Prepare toolchain build log
      if: always()
      run: |
        # Move build log file out of workspace
        mv ${WORKSPACE}/build/build.log ${{ matrix.target }}.log

        # TODO: Compress build log file

    - name: Upload toolchain build log
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: log_${{ matrix.host.name }}_${{ matrix.target }}
        path: ${{ matrix.target }}.log

    - name: Upload toolchain build artifact
      uses: actions/upload-artifact@v2
      with:
        name: toolchain_${{ matrix.host.name }}_${{ matrix.target }}
        path: toolchain_${{ matrix.host.name }}_${{ matrix.target }}.${{ matrix.host.archive }}

  # Build host tools
  build-hosttools:
    name: Host Tools (${{ matrix.host.name }})
    needs: setup
    runs-on: ${{ matrix.host.build-runner }}
    container: ${{ matrix.host.build-container }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        host: ${{ fromJSON(needs.setup.outputs.hosts) }}

    steps:
    - name: Set up build environment (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        # Clean up working directories
        sudo rm -rf ${GITHUB_WORKSPACE}/*

        # Set environment variables
        echo "TAR=tar" >> $GITHUB_ENV

    - name: Set up build environment (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        # Clean up working directories
        rm -rf ${GITHUB_WORKSPACE}/*

        # Set environment variables
        echo "TAR=gtar" >> $GITHUB_ENV

    - name: Check out source code
      uses: actions/checkout@v2

    - name: Build Linux host tools
      if: startsWith(matrix.host.name, 'linux-')
      run: |
        POKY_BASE=${GITHUB_WORKSPACE}/meta-zephyr-sdk

        # Check out Poky
        ${POKY_BASE}/scripts/meta-zephyr-sdk-clone.sh

        # Patch Poky sanity configuration to allow building as root
        sed -i '/^INHERIT/ s/./#&/' poky/meta/conf/sanity.conf

        # Build meta-zephyr-sdk
        ${POKY_BASE}/scripts/meta-zephyr-sdk-build.sh tools

        # Prepare artifact for upload
        ARTIFACT_ROOT="${POKY_BASE}/scripts/toolchains"
        ARTIFACT=(${ARTIFACT_ROOT}/*hosttools*.sh)
        ARTIFACT=${ARTIFACT[0]}
        ARTIFACT=$(basename ${ARTIFACT})

        ${TAR} -zcvf hosttools_${{ matrix.host.name }}.tar.gz --owner=0 --group=0 \
               -C ${ARTIFACT_ROOT} ${ARTIFACT}

    - name: Upload toolchain build artifact
      if: startsWith(matrix.host.name, 'linux-') # FIXME: Do for all
      uses: actions/upload-artifact@v2
      with:
        name: hosttools_${{ matrix.host.name }}
        path: hosttools_${{ matrix.host.name }}.${{ matrix.host.archive }}

    # TODO: Add host tool build process for macOS hosts.
    # TODO: Add host tool build process for Windows hosts.

  # Build CMake package
  build-cmake-pkg:
    name: CMake Package (${{ matrix.host.name }})
    needs: setup
    runs-on: ${{ matrix.host.build-runner }}
    container: ${{ matrix.host.build-container }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        host: ${{ fromJSON(needs.setup.outputs.hosts) }}

    steps:
    - name: Set up build environment (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        # Clean up working directories
        sudo rm -rf ${GITHUB_WORKSPACE}/*

        # Install common dependencies
        sudo apt update
        sudo apt-get install -y zip

        # Set environment variables
        echo "TAR=tar" >> $GITHUB_ENV

    - name: Set up build environment (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        # Clean up working directories
        rm -rf ${GITHUB_WORKSPACE}/*

        # Install required dependencies if running inside a GitHub-hosted runner
        # (self-hosted runners are expected to provide all required dependencies)
        if [[ "${{ matrix.host.build-runner }}" =~ ^macos.* ]]; then
          brew install gnu-tar
        fi

        # Set environment variables
        echo "TAR=gtar" >> $GITHUB_ENV

    - name: Check out source code
      uses: actions/checkout@v2

    - name: Build CMake package
      run: |
        # Create CMake package archive
        if [ "${{ matrix.host.archive }}" == "tar.gz" ]; then
          ${TAR} -zcvf cmake_${{ matrix.host.name }}.tar.gz --owner=0 --group=0 \
                 -C . cmake
        elif [ "${{ matrix.host.archive }}" == "zip" ]; then
          zip -r cmake_${{ matrix.host.name }}.zip \
                 cmake
        fi

    - name: Upload CMake package build artifact
      uses: actions/upload-artifact@v2
      with:
        name: cmake_${{ matrix.host.name }}
        path: cmake_${{ matrix.host.name }}.${{ matrix.host.archive }}

  # Build distribution bundle
  build-dist-bundle:
    name: Distribution Bundle (${{ matrix.host.name }})
    needs: [ setup, build-toolchain, build-hosttools, build-cmake-pkg ]
    runs-on: ${{ matrix.host.build-runner }}
    container: ${{ matrix.host.build-container }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        host: ${{ fromJSON(needs.setup.outputs.hosts) }}

    steps:
    - name: Set up build environment (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        # Clean up working directories
        sudo rm -rf ${GITHUB_WORKSPACE}/*

        # Install common dependencies
        sudo apt update
        sudo apt-get install -y jq zip

        # Set environment variables
        echo "TAR=tar" >> $GITHUB_ENV

    - name: Set up build environment (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        # Clean up working directories
        rm -rf ${GITHUB_WORKSPACE}/*

        # Install required dependencies if running inside a GitHub-hosted runner
        # (self-hosted runners are expected to provide all required dependencies)
        if [[ "${{ matrix.host.build-runner }}" =~ ^macos.* ]]; then
          brew install gnu-tar jq
        fi

        # Set environment variables
        echo "TAR=gtar" >> $GITHUB_ENV

    - name: Check out source code
      uses: actions/checkout@v2
      with:
        path: repository

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        # NOTE: This downloads all build artifacts, including the toolchains and host tools for
        #       the irrelevant hosts, because the download-artifact action does not support
        #       specifying wildcards in the artifact name.
        path: artifacts

    - name: Create distribution bundle
      run: |
        # Set environment variables
        HOST=${{ matrix.host.name }}
        EXT=${{ matrix.host.archive }}
        REPO_ROOT=${GITHUB_WORKSPACE}/repository
        ARTIFACT_ROOT=${GITHUB_WORKSPACE}/artifacts
        VERSION=$(<${ARTIFACT_ROOT}/version/version)
        ARCHIVE_DIR=${{ env.BUNDLE_PREFIX }}-${VERSION}
        ARCHIVE_NAME=${{ env.BUNDLE_PREFIX }}-${VERSION}_${HOST}

        echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV

        if [ "${{ matrix.host.archive }}" == "tar.gz" ]; then
          EXTRACT="${TAR} -zxvf"
        elif [ "${{ matrix.host.archive }}" == "zip" ]; then
          EXTRACT="unzip"
        fi

        # Create bundle directory
        mkdir ${ARCHIVE_DIR}
        pushd ${ARCHIVE_DIR}

        # Stage version file
        echo "${VERSION}" > sdk_version

        # Stage CMake package
        ${EXTRACT} ${ARTIFACT_ROOT}/cmake_${HOST}/cmake_${HOST}.${EXT}

        # Stage toolchains
        ## Generate target list from the workflow matrix
        TARGETS=$(echo '${{ needs.setup.outputs.targets }}' | jq -cr '.[]')

        ## Extract all toolchains
        for TARGET in ${TARGETS}; do
          TOOLCHAIN_ARTIFACT=toolchain_${HOST}_${TARGET}
          ${EXTRACT} ${ARTIFACT_ROOT}/${TOOLCHAIN_ARTIFACT}/${TOOLCHAIN_ARTIFACT}.${EXT}
        done

        # Stage host tools
        HOSTTOOLS_ARTIFACT=hosttools_${HOST}
        if [ -d ${ARTIFACT_ROOT}/${HOSTTOOLS_ARTIFACT} ]; then
          ${EXTRACT} ${ARTIFACT_ROOT}/${HOSTTOOLS_ARTIFACT}/${HOSTTOOLS_ARTIFACT}.${EXT}
        fi

        # Stage setup script
        case ${{ matrix.host.name }} in
          linux-* | macos-*)
            cp ${REPO_ROOT}/scripts/template_setup_posix setup.sh
            chmod +x setup.sh
            ;;
          windows-*)
            cp ${REPO_ROOT}/scripts/template_setup_win setup.cmd
            ;;
        esac
        popd

        # Create distribution bundle archive
        if [ "${{ matrix.host.archive }}" == "tar.gz" ]; then
          ${TAR} -zcvf ${ARCHIVE_NAME}.${EXT} --owner=0 --group=0 \
                 -C . ${ARCHIVE_DIR}
        elif [ "${{ matrix.host.archive }}" == "zip" ]; then
          zip -r ${ARCHIVE_NAME}.${EXT} ${ARCHIVE_DIR}
        fi

    - name: Upload distribution bundle
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARCHIVE_NAME }}
        path: ${{ env.ARCHIVE_NAME }}.${{ matrix.host.archive }}

  # Test distribution bundle
  test-dist-bundle:
    name: Test (${{ matrix.host.name }})
    needs: [ setup, build-dist-bundle ]
    runs-on: ${{ matrix.host.test-runner }}
    container: ${{ matrix.host.test-container }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        host: ${{ fromJSON(needs.setup.outputs.hosts) }}

    steps:
    - name: Set up test environment (Linux)
      if: ${{ runner.os == 'Linux' }}
      run: |
        # Clean up working directories
        sudo rm -rf ${GITHUB_WORKSPACE}/*

        # Set environment variables
        echo "TAR=tar" >> $GITHUB_ENV
        echo "ARTIFACT_ROOT=${GITHUB_WORKSPACE}/artifacts" >> $GITHUB_ENV

    - name: Set up test environment (macOS)
      if: ${{ runner.os == 'macOS' }}
      run: |
        # Clean up working directories
        rm -rf ${GITHUB_WORKSPACE}/*

        # Set environment variables
        echo "TAR=gtar" >> $GITHUB_ENV
        echo "ARTIFACT_ROOT=${GITHUB_WORKSPACE}/artifacts" >> $GITHUB_ENV

    - name: Set up test environment (Windows)
      if: ${{ runner.os == 'Windows' }}
      run: |
        # TODO: Clean up working directories
        echo "We are running in bash, right?"
        echo "${SHELL}"

        # Set environment variables
        echo "ARTIFACT_ROOT=${GITHUB_WORKSPACE}/artifacts" >> $GITHUB_ENV

    - name: Download version information
      uses: actions/download-artifact@v2
      with:
        name: version
        path: artifacts

    - name: Resolve distribution bundle name
      run: |
        # Set base environment variables
        HOST=${{ matrix.host.name }}
        EXT=${{ matrix.host.archive }}
        VERSION=$(<${ARTIFACT_ROOT}/version)

        # Resolve distribution bundle name
        BUNDLE_NAME=${{ env.BUNDLE_PREFIX }}-${VERSION}_${HOST}
        BUNDLE_DIR=${{ env.BUNDLE_PREFIX }}-${VERSION}
        echo "BUNDLE_NAME=${BUNDLE_NAME}" >> $GITHUB_ENV
        echo "BUNDLE_DIR=${BUNDLE_DIR}" >> $GITHUB_ENV

    - name: Download distribution bundle
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.BUNDLE_NAME }}
        path: artifacts

    - name: Install distribution bundle
      run: |
        # FIXME: Debug
        ls -lR

        # Create tools directory
        mkdir -p tools

        # Extract distribution bundle archive
        if [ "${{ matrix.host.archive }}" == "tar.gz" ]; then
          ${TAR} -zxvf ${ARTIFACT_ROOT}/${BUNDLE_NAME}.tar.gz -C tools
        elif [ "${{ matrix.host.archive }}" == "zip" ]; then
          unzip ${ARTIFACT_ROOT}/${BUNDLE_NAME}.zip -d tools
        fi

        # Run setup script
        pushd ${GITHUB_WORKSPACE}/tools/${BUNDLE_DIR}

        if [ "${{ runner.os }}" == "Windows" ]; then
          ./setup.cmd /c /t
        else
          ./setup.sh -c -t
        fi

        popd

    - name: Set up Zephyr repository
      run: |
        # TODO: Set up Zephyr repository

    - name: Run test suites
      run: |
        # TODO: Run test suites with twister

  # Release
  release:
    name: Release
    if: github.event_name == 'release'
    needs: [ test-dist-bundle ]
    runs-on: zephyr_runner

    steps:
    - name: Set up build environment
      run: |
        # Clean up working directories
        sudo rm -rf ${GITHUB_WORKSPACE}/*

    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        # Set base environment variables
        ARTIFACT_ROOT=${GITHUB_WORKSPACE}/artifacts
        ASSET_ROOT=${GITHUB_WORKSPACE}/assets
        VERSION=$(<${ARTIFACT_ROOT}/version/version)

        # Collect release assets
        mkdir -p ${ASSET_ROOT}
        pushd ${ASSET_ROOT}
        mv ${ARTIFACT_ROOT}/toolchain_*/* .
        mv ${ARTIFACT_ROOT}/hosttools_*/* .
        mv ${ARTIFACT_ROOT}/${{ env.BUNDLE_PREFIX }}-*/* .
        popd

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: assets/*
